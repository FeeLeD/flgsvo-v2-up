// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------POST---------------------

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  files     File[]
  published Boolean  @default(true)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?

  @@map("posts")
}

// ----------------USER--------------------

model User {
  id            Int        @id @default(autoincrement())
  firstName     String     @map(name: "first_name")
  lastName      String     @map(name: "last_name")
  otherName     String?    @map(name: "other_name")
  email         String     @unique
  password      String
  emailVerified DateTime?  @map(name: "email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  role          GlobalRole @default(USER)
  posts         Post[]
  events        Event[]
  files         File[]

  @@map(name: "users")
}

enum GlobalRole {
  USER
  JUDGE
  ADMIN
}

// ----------------EVENT---------------------

model Event {
  id                 Int         @id @default(autoincrement())
  type               EventType
  startDate          DateTime    @map(name: "start_date")
  endDate            DateTime?   @map(name: "end_date")
  title              String
  description        String?
  location           Location    @relation(fields: [locationId], references: [id])
  locationId         Int
  organizers         Organizer[]
  files              File[]
  races              Race[]
  payload            Json?
  registrationOpened Boolean     @default(false)
  author             User?       @relation(fields: [authorId], references: [id])
  authorId           Int

  @@map("events")
}

enum EventType {
  SKIING
  RUNNING
  ROLLER
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  address     String?
  city        String?
  country     String?
  phone       String?
  web         String?
  payload     Json?
  Event       Event[]

  @@map("locations")
}

model Organizer {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  phone       String?
  email       String?
  web         String?
  location    String?
  payload     Json?
  Event       Event?  @relation(fields: [eventId], references: [id])
  eventId     Int?

  @@map("organizers")
}

model Race {
  id                  Int             @id @default(autoincrement())
  description         String?
  date                DateTime
  category            RaceCategory[]
  type                RaceType
  style               RaceStyle?
  distanceKm          Float?
  athletes            RacesAthletes[]
  startProtocol       File?           @relation(fields: [startProtocolFileId], references: [id])
  startProtocolFileId Int?
  event               Event?          @relation(fields: [eventId], references: [id])
  eventId             Int?
  applications        Applications[]
  results             Results[]

  @@map("races")
}

enum RaceCategory {
  MEN
  MEN_JUNIORS
  MEN_YOUTH_ELDER
  MEN_YOUTH_MIDDLE
  MEN_YOUTH_JUNIOR
  MEN_CHILDREN
  WOMEN
  WOMEN_JUNIORS
  WOMEN_YOUTH_ELDER
  WOMEN_YOUTH_MIDDLE
  WOMEN_YOUTH_JUNIOR
  WOMEN_CHILDREN
}

enum RaceStyle {
  FREE
  CLASSIC
}

enum RaceType {
  INDIVIDUAL
  MASS
  RELAY
  SKIATHLON
  SPRINT
  PURSUIT
}

// ----------------ATHLETE----------------------

model Athlete {
  id           Int             @id @default(autoincrement())
  code         Int             @unique
  fisCode      String?
  rusCode      String?
  lastName     String
  firstName    String
  middleName   String
  birthDate    DateTime
  payDate      DateTime?
  birthYear    Int?
  sportLevel   SportLevel
  team         String
  city         String
  phone        String
  gender       Gender
  confirmed    Boolean
  active       Boolean         @default(true)
  races        RacesAthletes[]
  applications Applications[]
  results      Results[]

  @@map("athletes")
}

enum Gender {
  MAN
  WOMAN
}

enum SportLevel {
  ZMS
  MSMK
  MS
  KMS
  FIRST
  SECOND
  THIRD
  FIRST_JUNIOR
  SECOND_JUNIOR
  THIRD_JUNIOR
  NONE
}

// ----------------RACES_ATHLETES----------------------

model RacesAthletes {
  id        Int     @id @default(autoincrement())
  athlete   Athlete @relation(fields: [athleteId], references: [id])
  athleteId Int
  race      Race    @relation(fields: [raceId], references: [id])
  raceId    Int
  payload   Json?

  @@map("races_athletes")
}

model Applications {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  athlete   Athlete  @relation(fields: [athleteId], references: [id])
  athleteId Int
  race      Race     @relation(fields: [raceId], references: [id])
  raceId    Int

  @@map("applications")
}

model Results {
  id        Int     @id @default(autoincrement())
  athlete   Athlete @relation(fields: [athleteId], references: [id])
  athleteId Int
  race      Race    @relation(fields: [raceId], references: [id])
  raceId    Int
  number    Int
  place     Int
  finalTime String
  gap       String?
  extra     Json?

  @@map("results")
}

// ----------------FILE---------------------

model File {
  id         Int      @id @default(autoincrement())
  name       String
  sourceLink String
  type       FileType @default(FILE)
  createdAt  DateTime @default(now()) @map(name: "created_at")
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   Int?
  post       Post?    @relation(fields: [postId], references: [id])
  postId     Int?
  event      Event?   @relation(fields: [eventId], references: [id])
  eventId    Int?
  Race       Race[]

  @@map("files")
}

enum FileType {
  FILE
  PROGRAM
  RESULT
}

// ----------------SESSION----------------------

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}
